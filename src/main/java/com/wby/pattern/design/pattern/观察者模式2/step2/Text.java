package com.wby.pattern.design.pattern.观察者模式2.step2;

/**
 * 认识观察者模式
 * 以报纸和杂志的订阅为例子:
 *  1.报社的业务是出版报纸
 *  2.想某家报社订阅报纸,只要他们有新报纸,就会给你送来.只要你是他们的订户,你就会一直收到新报纸
 *  3.当你不想再看报纸的时候,取消订阅,他们就不再送新报纸了.
 *  4.只要报社还在运营,就会一直有人向他们订阅报纸或取消订阅
 *
 *  出版者+订阅者=观察者模式
 *  出版者改称为"主题"(Subject),订阅者改称为"观察者"(Observer)
 *
 *  主题对象管理某些数据,当主题内的数据改变时就会通知观察者(一旦数据改变,新数据会以某种形式送到观察者中)
 *  观察者已经订阅(注册)主题一边在主题数据改变时能够收到更新.
 *
 *  观察者模式流程:
 *      1.鸭子告诉主题,他想当一个观察者:对你的数据变化感兴趣,一旦有变化就通知我
 *      2.鸭子是观察者了:静候通知,等待参与这项事情.一旦接到通知,就会得到一个整数.
 *      3.主题有了新数值,鸭子和其他观察者都会收到通知:主体已经改变了
 *      4.老鼠要求从观察者中把自己除去,因为他已经厌倦了
 *      5.主题知道请求后,把他从观察者中除名了
 *      6.主体有了一个新整数,除了老鼠外,所有观察者都会收到通知
 *
 *  定义观察者模式:
 *      观察者模式定义了对象之间一对多依赖,这样,当一个对象改变状态时,他的所有依赖者会收到通知并自动更新.
 *
 *  观察者模式实现方法不止一种,但是以包含Subject和Observer接口的类设计最常见.
 */
public class Text {
}
