package com.wby.pattern.design.pattern.适配器模式与外观模式7.step9;

/**
 * 1. 当需要使用现有的类,而其接口不符合需要时,使用适配器
 * 2. 当需要简化并统一一个很大的接口/一群复杂的接口时,使用外观
 * 3. 适配器改变接口以符合客户的期望
 * 4. 外观将客户从一个复杂的子系统中解耦
 * 5. 实现适配器需要一定的功夫,也可能不费功夫,完全由接口的大小与复杂度而定
 * 6. 实现外观,需要将子系统组合进外观中,然后将工作委托给子系统执行
 * 7. 适配模式有两种形式:对象适配器和类适配器.类适配器需要使用多重继承
 * 8. 可以为一个子系统实现一个以上的外观
 * 9. 适配器将一个对象包装起来以改变其接口;装饰者将一个对象包装起来以增加新的行为和责任;外观将一群对象"包装"起来以简化其接口
 */
public class Text {
}
