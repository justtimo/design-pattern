package com.wby.pattern.design.pattern.适配器模式与外观模式7.step6;

/**
 * 装饰者与适配器
 *  Z: 我的工作和"责任"相关.当涉及到装饰者,就表示有新的行为或责任要加入到设计中
 *  S: 我用来转换接口
 *  Z: 当我装饰一个大型接口时,需要很多代码
 *  S: 当你必须将若干类整合在一起,来提供客户所需的接口时,不妨试试适配器,这会很麻烦.
 *      不过,"被解耦的客户才是快乐的客户"
 *  Z: 当一个方法调用委托给我时,我不知道有多少其他装饰着已经处理过这个调用
 *  S: 只要适配器工作顺利,客户不会意识到我的存在.
 *      但是,好处是,允许客户使用新的库和子集合,无需改变"任何"代码,有我负责转换即可
 *  Z: 我也可以做到,但是我们可以让"新行为"加入类中,而无需修改现有代码.但是我还是认为适配器时装饰者的一种变体,都是用来包装对象的
 *  S: 不是的.我们"一定会"进行接口转换.但是装饰者"绝不会"这么做.我认为装饰者是适配器的变体,只是装饰者不会改变接口
 *  Z: 不.我的工作是扩展包装的对象的行为或责任,而不是"简单传送"
 *  S: 我不是简单传送.你转换几个接口试试,看你能持续多久
 *  Z: 很明显,我们看起来虽然类似,但其实意图的差异很大
 */
public class Text {
}
