package com.wby.pattern.design.pattern.适配器模式与外观模式7.step4;

/**
 * 对象和类的适配器
 *      实际上有两种适配器: 对象适配器    类适配器
 *      之前的是对象适配器,见下图
 *              Client   ========================>Target<Intergace>> request()
 *              客户值看到目标接口                        |                       适配器与被适配者组合
 *                                                  Adapter:适配器实现目标接口==========================>Adaptee:所有请求都委托给被适配者
 *                                                  request()                                         specificRequest()
 *
 * 类适配器,需要多重继承才能实现它,这在JAVA中不可能,但是其他支持多重继承的语言可以实现.见如下类图
 *              Client=====================================> Target:request()                           Adaptee:specificRequest()
 *                                                                \                                         /
 *                                                                   \                                   /
 *                                                                       \                            /
 *                                                                            \                  /
 *                                                                              Adapter:request()使用竭诚,继承被适配者和目标类
 * 唯一的差别就在于:适配器继承了Target和Adaptee.而对象适配器利用组合将请求传送给被适配者
 */
public class Text {
}
/**
 * 对象适配器和类适配器的优劣
 * D: 我使用组合,不仅可以适配某个类,也可以适配该类的子类
 * L: 我做不到这点,我只能够采用某个特定的被适配类.但是我有个有点:我不需要重新实现整个被适配者.必要时,我可以覆盖被适配者,因为我使用的是继承
 * D: 但是我只需要写一些代码,将工作委托给被适配者进行,这样更有弹性
 *
 */
